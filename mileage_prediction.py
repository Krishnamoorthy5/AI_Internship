# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cA5HxTP5sWk0h94BtCLIktOTUOjrfRzO

# **Mileage Prediction - Regression Analysis**

## Objective :
To develop an AI/ML project using NumPy, pandas, Matplotlib, and Seaborn to predict vehicle mileage (MPG) through regression analysis. Key goals include data preprocessing, feature selection, model training, evaluation, and potentially deployment for accurate MPG estimation, benefiting the automotive industry.

## Data Source :
This dataset was taken from the StatLib library which is maintained at Carnegie Mellon University. The dataset was used in the 1983 American Statistical Association Exposition.
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""#**Import data**"""

df=pd.read_csv("https://github.com/YBIFoundation/Dataset/raw/main/MPG.csv")
df

"""#**Data Pre-processing**"""

df.info()

df.describe()

"""#**Removing Missing values**"""

df=df.dropna()

df.info()

"""#**Data Visualization**"""

sns.pairplot(data=df, x_vars=['displacement','horsepower','weight','acceleration','mpg'], y_vars='mpg')
plt.show()
sns.regplot(x='displacement', y='mpg', data=df)

"""#**Define Target Variable y and features X**"""

df.columns

y=df['mpg']

X=df[['acceleration','displacement','horsepower','weight']]

y.shape

X.shape

X

"""#**Scaling Data**"""

from sklearn.preprocessing import StandardScaler
ss = StandardScaler()
X = ss.fit_transform(X)
X

pd.DataFrame(X).describe()

"""##Observe that after scaling Mean is 0 and std is 1

#**Train test split**
"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, train_size=0.75, random_state=2529)
X_train.shape, X_test.shape, y_train.shape, y_test.shape

"""#**Linear Rgression**"""

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(X_train, y_train)

lr.intercept_

lr.coef_

"""###**Mileage=23.464-0.165 * acceleration-0.821 * displacement -2 *  horsepower-4.127 * weight + error**

#**Predict test data**
"""

y_pred = lr.predict(X_test)
y_pred

"""#**Model Accuracy**"""

from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, r2_score
mean_absolute_error(y_test, y_pred)

mean_absolute_percentage_error(y_test, y_pred)

r2_score(y_test, y_pred)

"""#**Polynomial Regression**"""

from sklearn.preprocessing import PolynomialFeatures
poly = PolynomialFeatures(degree=2, interaction_only=True, include_bias=False)
X_train2 = poly.fit_transform(X_train)
X_test2 = poly.fit_transform(X_test)
lr.fit(X_train2, y_train)

lr.intercept_

lr.coef_

y_pred_poly = lr.predict(X_test2)
y_pred_poly

"""#**Model Accuracy**"""

from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, r2_score
mean_absolute_error(y_test, y_pred_poly)

mean_absolute_percentage_error(y_test, y_pred_poly)

r2_score(y_test, y_pred_poly)

"""#**Random forest Regressor**"""

from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

y_pred_rf = rf.predict(X_test)
y_pred_rf

"""#**Model Accuracy**"""

mae_rf = mean_absolute_error(y_test, y_pred_rf)
mae_rf

mape_rf = mean_absolute_percentage_error(y_test, y_pred_rf)
mape_rf

r2_rf = r2_score(y_test, y_pred_rf)
r2_rf

"""# **Explanation and Conclusion**
This project involved data preprocessing to ensure data quality, data visualization for insights, and a robust prediction model for accurate vehicle mileage estimation. It holds promise for automotive applications.

A well-prepared dataset, insightful visualization, and a strong prediction model make this project valuable for automotive research and design.
"""